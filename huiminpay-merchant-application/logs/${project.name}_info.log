[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:38,653   INFO   [main][AbstractTestContextBootstrapper.java:308]   -   Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.huiminpay.merchant.TestRestTemplate], using SpringBootContextLoader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:38,667   INFO   [main][AbstractContextLoader.java:264]   -   Could not detect default resource locations for test class [com.huiminpay.merchant.TestRestTemplate]: no resource found for suffixes {-context.xml, Context.groovy}.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:38,854   INFO   [main][AbstractTestContextBootstrapper.java:248]   -   Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:38,880   INFO   [main][AbstractTestContextBootstrapper.java:177]   -   Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@1a34df2, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@138c1ec, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@18fc1d8, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@122ef0c, org.springframework.test.context.support.DirtiesContextTestExecutionListener@e1f6c7, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@1cb6996, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@7e3f6, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@d3575, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@11da57d, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@194fad1]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:39,765   INFO   [main][:]   -   using logger: org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:39,770   INFO   [main][WelcomeLogoApplicationListener.java:63]   -   

 :: Dubbo Spring Boot (v2.7.1) : https://github.com/apache/incubator-dubbo-spring-boot-project
 :: Dubbo (v2.7.3) : https://github.com/apache/incubator-dubbo
 :: Discuss group : dev@dubbo.apache.org

[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:39,776   INFO   [main][OverrideDubboConfigApplicationListener.java:68]   -   Dubbo Config was overridden by externalized configuration {dubbo.application.name=merchant-application, dubbo.application.qos-enable=false, dubbo.config.multiple=true, dubbo.consumer.check=false, dubbo.consumer.retries=-1, dubbo.consumer.timeout=3000, dubbo.protocol.name=dubbo, dubbo.protocol.port=20891, dubbo.registry.address=nacos://127.0.0.1:8848, dubbo.scan.base‐packages=com.huiminpay.merchant}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:40,170   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$b4bd3a79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:40,238   INFO   [pool-3-thread-1][AwaitingNonWebApplicationListener.java:140]   -    [Dubbo] Current Spring Boot Application is await...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:40,849   INFO   [main][OverrideDubboConfigApplicationListener.java:68]   -   Dubbo Config was overridden by externalized configuration {dubbo.application.name=merchant-application, dubbo.application.qos-enable=false, dubbo.config.multiple=true, dubbo.consumer.check=false, dubbo.consumer.retries=-1, dubbo.consumer.timeout=3000, dubbo.protocol.name=dubbo, dubbo.protocol.port=20891, dubbo.registry.address=nacos://127.0.0.1:8848, dubbo.scan.base‐packages=com.huiminpay.merchant}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:41,361   INFO   [main][NacosPropertySourceBuilder.java:87]   -   Loading nacos data, dataId: 'spring-boot-http.yaml', group: 'COMMON_GROUP'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:41,374   INFO   [main][NacosPropertySourceBuilder.java:87]   -   Loading nacos data, dataId: 'merchant-application.yaml', group: 'HUIMINPAY_GROUP'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:41,376   INFO   [main][PropertySourceBootstrapConfiguration.java:98]   -   Located property source: CompositePropertySource {name='NACOS', propertySources=[NacosPropertySource@22940619 {name='merchant-application.yaml', properties={swagger.enable=true, server.servlet.context-path=/merchant}}, NacosPropertySource@21058255 {name='spring-boot-http.yaml', properties={management.endpoints.web.exposure.include=refresh,health,info,env, spring.http.encoding.charset=UTF-8, spring.http.encoding.enabled=true, server.use-forward-headers=true, server.servlet.context-path=/, spring.messages.encoding=UTF-8, spring.http.encoding.force=true, server.tomcat.protocol_header=x-forwarded-proto, server.tomcat.remote_ip_header=x-forwarded-for}}]}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:41,409   INFO   [main][SpringApplication.java:675]   -   No active profile set, falling back to default profiles: default
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,146   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,148   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,154   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ApplicationConfig] within prefix [dubbo.applications]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,154   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ModuleConfig] within prefix [dubbo.modules]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.RegistryConfig] within prefix [dubbo.registries]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProtocolConfig] within prefix [dubbo.protocols]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MonitorConfig] within prefix [dubbo.monitors]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProviderConfig] within prefix [dubbo.providers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ConsumerConfig] within prefix [dubbo.consumers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.spring.ConfigCenterBean] within prefix [dubbo.config-centers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,155   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MetadataReportConfig] within prefix [dubbo.metadata-reports]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,156   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ApplicationConfig#0, class : org.apache.dubbo.config.ApplicationConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,159   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ApplicationConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ModuleConfig] within prefix [dubbo.module]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.RegistryConfig#0, class : org.apache.dubbo.config.RegistryConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.RegistryConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ProtocolConfig#0, class : org.apache.dubbo.config.ProtocolConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ProtocolConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MonitorConfig] within prefix [dubbo.monitor]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,160   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProviderConfig] within prefix [dubbo.provider]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,161   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ConsumerConfig#0, class : org.apache.dubbo.config.ConsumerConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,161   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ConsumerConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,161   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.spring.ConfigCenterBean] within prefix [dubbo.config-center]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,161   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MetadataReportConfig] within prefix [dubbo.metadata-report]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,314   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,373   INFO   [main][ServiceAnnotationBeanPostProcessor.java:204]   -    [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,373   INFO   [main][ServiceAnnotationBeanPostProcessor.java:206]   -    [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,378   WARN   [main][ServiceAnnotationBeanPostProcessor.java:169]   -    [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.huiminpay.merchant], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,379   INFO   [main][ConfigurationClassPostProcessor.java:380]   -   Cannot enhance @Configuration bean definition 'org.apache.dubbo.spring.boot.autoconfigure.DubboRelaxedBinding2AutoConfiguration' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,380   INFO   [main][ConfigurationClassPostProcessor.java:380]   -   Cannot enhance @Configuration bean definition 'org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,507   INFO   [main][GenericScope.java:294]   -   BeanFactory id=ec5f4d62-2066-3415-9b84-daa00a138238
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,784   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboOpenFeignAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboOpenFeignAutoConfiguration$$EnhancerBySpringCGLIB$$1c648680] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,800   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubbo.cloud-com.alibaba.cloud.dubbo.env.DubboCloudProperties' of type [com.alibaba.cloud.dubbo.env.DubboCloudProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,814   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'metadataJsonResolver' of type [com.alibaba.cloud.dubbo.metadata.resolver.DubboServiceBeanMetadataResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,828   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.apache.dubbo.config.ApplicationConfig#0' of type [org.apache.dubbo.config.ApplicationConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,832   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboProtocolConfigSupplier' of type [com.alibaba.cloud.dubbo.metadata.DubboProtocolConfigSupplier] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,834   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.DubboMetadataServiceExporter' of type [com.alibaba.cloud.dubbo.service.DubboMetadataServiceExporter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,834   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboMetadataAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboMetadataAutoConfiguration$$EnhancerBySpringCGLIB$$8ea422fa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,839   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboServiceAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboServiceAutoConfiguration$$EnhancerBySpringCGLIB$$214e2b52] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,845   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboGenericServiceFactory' of type [com.alibaba.cloud.dubbo.service.DubboGenericServiceFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,847   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboMetadataConfigServiceProxy' of type [com.alibaba.cloud.dubbo.service.DubboMetadataServiceProxy] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,851   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration' of type [org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$e193650c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,857   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientAutoConfiguration' of type [com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$d55e6dd1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,867   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.commons.util.UtilAutoConfiguration' of type [org.springframework.cloud.commons.util.UtilAutoConfiguration$$EnhancerBySpringCGLIB$$60510100] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,873   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'inetUtilsProperties' of type [org.springframework.cloud.commons.util.InetUtilsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:42,877   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'inetUtils' of type [org.springframework.cloud.commons.util.InetUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:43,485   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'nacosProperties' of type [com.alibaba.cloud.nacos.NacosDiscoveryProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:43,489   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'nacosDiscoveryClient' of type [com.alibaba.cloud.nacos.discovery.NacosDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:43,505   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties' of type [org.springframework.boot.autoconfigure.web.ServerProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:43,507   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$adc1fdda] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,087   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'simpleDiscoveryProperties' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,090   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'simpleDiscoveryClient' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,094   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'compositeDiscoveryClient' of type [org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,097   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.util.JSONUtils' of type [com.alibaba.cloud.dubbo.util.JSONUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,240   WARN   [main][DubboServiceMetadataRepository.java:216]   -   Current application will subscribe all services(size:0) in registry, a lot of memory and CPU cycles may be used, thus it's strongly recommend you using the externalized property 'dubbo.cloud.subscribed-services' to specify the services
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,241   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository' of type [com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,253   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestParamServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestParamServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,268   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties' of type [org.springframework.boot.autoconfigure.http.HttpProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,277   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration' of type [org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$e5e4c9b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,286   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'stringHttpMessageConverter' of type [org.springframework.http.converter.StringHttpMessageConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,291   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration' of type [org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$1fbac5b0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,297   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$f436b70d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,304   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$a6837926] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,309   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$619a5f15] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,315   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,320   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,330   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$8865d643] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,341   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,345   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$d642549c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,354   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,358   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,384   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,391   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'mappingJackson2HttpMessageConverter' of type [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,396   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration' of type [org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$$EnhancerBySpringCGLIB$$b2d70310] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,404   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'messageConverters' of type [org.springframework.boot.autoconfigure.http.HttpMessageConverters] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,406   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestBodyServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestBodyServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,412   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestHeaderServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestHeaderServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,417   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.PathVariableServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.PathVariableServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,418   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.DubboGenericServiceExecutionContextFactory' of type [com.alibaba.cloud.dubbo.service.DubboGenericServiceExecutionContextFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,435   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,440   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,442   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,445   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,453   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$b4bd3a79] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,544   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,644   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,656   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,697   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.ConsumerConfig#0] have been binding by prefix of configuration properties : dubbo.consumer
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,719   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.RegistryConfig#0] have been binding by prefix of configuration properties : dubbo.registry
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,726   INFO   [main][AnnotatedInterfaceConfigBeanBuilder.java:84]   -   The configBean[type:ReferenceBean] has been built.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,743   WARN   [main][AbstractInterfaceConfig.java:265]   -    [DUBBO] There's no valid metadata config found, if you are using the simplified mode of registry url, please make sure you have a metadata address configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,761   INFO   [main][AbstractInterfaceConfig.java:237]   -    [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,763   INFO   [main][AbstractInterfaceConfig.java:237]   -    [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,777   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,787   INFO   [main][QosProtocolWrapper.java:89]   -    [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,787   WARN   [main][SpringExtensionFactory.java:86]   -    [DUBBO] No spring extension (bean) named:applicationContext, try to find an extension (bean) of type org.springframework.context.ConfigurableApplicationContext, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,789   DEBUG   [main][SpringExtensionFactory.java:99]   -    [DUBBO] Error when get spring extension(bean) for type:org.springframework.context.ConfigurableApplicationContext, dubbo version: 2.7.3, current host: 192.168.137.1
org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.context.ConfigurableApplicationContext' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:343)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:335)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1123)
	at org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:94)
	at org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory.getExtension(AdaptiveExtensionFactory.java:47)
	at org.apache.dubbo.common.extension.ExtensionLoader.injectExtension(ExtensionLoader.java:566)
	at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:535)
	at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:351)
	at org.apache.dubbo.registry.RegistryFactory$Adaptive.getRegistry(RegistryFactory$Adaptive.java)
	at org.apache.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:379)
	at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:128)
	at org.apache.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:70)
	at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:69)
	at org.apache.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)
	at org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:401)
	at org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:329)
	at org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:250)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler.init(ReferenceAnnotationBeanPostProcessor.java:269)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler.access$100(ReferenceAnnotationBeanPostProcessor.java:242)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildInvocationHandler(ReferenceAnnotationBeanPostProcessor.java:236)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildProxy(ReferenceAnnotationBeanPostProcessor.java:219)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:134)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor.getInjectedObject(AnnotationInjectedBeanPostProcessor.java:360)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor$AnnotatedFieldElement.inject(AnnotationInjectedBeanPostProcessor.java:540)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor.postProcessPropertyValues(AnnotationInjectedBeanPostProcessor.java:147)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1400)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:127)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,794   WARN   [main][SpringExtensionFactory.java:104]   -    [DUBBO] No spring extension (bean) named:applicationContext, type:org.springframework.context.ConfigurableApplicationContext found, stop get bean., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,816   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,823   INFO   [main][AbstractRegistry.java:280]   -    [DUBBO] Register: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,823   DEBUG   [main][AbstractSpringCloudRegistry.java:116]   -   The URL[consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743] should not be registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,830   INFO   [main][AbstractRegistry.java:305]   -    [DUBBO] Subscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,840   INFO   [main][AbstractRegistry.java:212]   -    [DUBBO] Load registry cache file C:\Users\86188\.dubbo\dubbo-registry-merchant-application-127.0.0.1:8848.cache, data: {merchant-service/com.alibaba.cloud.dubbo.service.DubboMetadataService:1.0.0=dubbo://192.168.137.1:20892/com.alibaba.cloud.dubbo.service.DubboMetadataService?anyhost=true&application=merchant-service&category=providers&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&group=merchant-service&interface=com.alibaba.cloud.dubbo.service.DubboMetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&path=com.alibaba.cloud.dubbo.service.DubboMetadataService&pid=21116&protocol=dubbo&register=true&release=2.7.3&revision=2.1.0.RELEASE&side=provider&timestamp=1610639248351&version=1.0.0, com.huiminpay.merchant.service.MerchantServiceApi=dubbo://192.168.137.1:20892/com.huiminpay.merchant.service.MerchantServiceApi?anyhost=true&application=merchant-service&bean.name=ServiceBean:com.huiminpay.merchant.service.MerchantServiceApi&category=providers&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.huiminpay.merchant.service.MerchantServiceApi&methods=findMerchantById&path=com.huiminpay.merchant.service.MerchantServiceApi&pid=21116&protocol=dubbo&register=true&release=2.7.3&side=provider&timestamp=1610639246705}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,840   INFO   [main][AbstractRegistry.java:280]   -    [DUBBO] Register: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,895   INFO   [main][AbstractRegistry.java:305]   -    [DUBBO] Subscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,947   WARN   [main][AbstractRegistry.java:395]   -    [DUBBO] Ignore empty notify urls for subscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,948   WARN   [com.alibaba.nacos.naming.client.listener][AbstractRegistry.java:395]   -    [DUBBO] Ignore empty notify urls for subscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:44,950   INFO   [main][ReferenceConfig.java:421]   -    [DUBBO] Refer dubbo service com.huiminpay.merchant.service.MerchantServiceApi from url registry://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&check=false&cluster=registryaware&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&refer=application%3Dmerchant-application%26check%3Dfalse%26dubbo%3D2.0.2%26interface%3Dcom.huiminpay.merchant.service.MerchantServiceApi%26lazy%3Dfalse%26methods%3DfindMerchantById%26pid%3D43136%26qos.enable%3Dfalse%26register.ip%3D192.168.137.1%26release%3D2.7.3%26retries%3D-1%26side%3Dconsumer%26sticky%3Dfalse%26timeout%3D3000%26timestamp%3D1610694224743&register.ip=192.168.137.1&registry=nacos&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,051   INFO   [main][EndpointLinksResolver.java:59]   -   Exposing 4 endpoint(s) beneath base path '/actuator'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,235   INFO   [main][PropertySourcedRequestMappingHandlerMapping.java:69]   -   Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,527   WARN   [main][URLConfigurationSource.java:121]   -   No URLs will be polled as dynamic configuration sources.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,528   INFO   [main][URLConfigurationSource.java:122]   -   To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,535   WARN   [main][URLConfigurationSource.java:121]   -   No URLs will be polled as dynamic configuration sources.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,535   INFO   [main][URLConfigurationSource.java:122]   -   To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,574   DEBUG   [main][TraversableResolvers.java:60]   -   Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,575   DEBUG   [main][ResourceBundleMessageInterpolator.java:89]   -   Loaded expression factory via original TCCL
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,583   DEBUG   [main][TraversableResolvers.java:60]   -   Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,584   DEBUG   [main][ConfigurationImpl.java:148]   -   Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,584   DEBUG   [main][ConfigurationImpl.java:180]   -   Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,585   DEBUG   [main][ConfigurationImpl.java:194]   -   Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,585   DEBUG   [main][ValidationXmlParser.java:120]   -   Trying to load META-INF/validation.xml for XML based Validator configuration.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,586   DEBUG   [main][ResourceLoaderHelper.java:53]   -   Trying to load META-INF/validation.xml via user class loader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,586   DEBUG   [main][ResourceLoaderHelper.java:60]   -   Trying to load META-INF/validation.xml via TCCL
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,586   DEBUG   [main][ResourceLoaderHelper.java:66]   -   Trying to load META-INF/validation.xml via Hibernate Validator's class loader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,587   DEBUG   [main][ValidationXmlParser.java:127]   -   No META-INF/validation.xml found. Using annotation based configuration only.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,590   DEBUG   [main][ValidatorFactoryImpl.java:578]   -   HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,590   DEBUG   [main][ValidatorFactoryImpl.java:579]   -   HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,590   DEBUG   [main][ValidatorFactoryImpl.java:580]   -   HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,591   DEBUG   [main][ValidatorFactoryImpl.java:581]   -   HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,591   DEBUG   [main][ValidatorFactoryImpl.java:582]   -   HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,671   INFO   [main][ExecutorConfigurationSupport.java:171]   -   Initializing ExecutorService 'applicationTaskExecutor'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,983   INFO   [main][ExecutorConfigurationSupport.java:171]   -   Initializing ExecutorService
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:46,997   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.ProtocolConfig#0] have been binding by prefix of configuration properties : dubbo.protocol
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,404   INFO   [main][DubboServiceMetadataRepository.java:262]   -   The metadata of Dubbo services has been initialized
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,418   INFO   [main][DocumentationPluginsBootstrapper.java:160]   -   Context refreshed
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,423   WARN   [ThreadPoolTaskScheduler-1][DubboServiceMetadataRepository.java:216]   -   Current application will subscribe all services(size:0) in registry, a lot of memory and CPU cycles may be used, thus it's strongly recommend you using the externalized property 'dubbo.cloud.subscribed-services' to specify the services
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,441   INFO   [main][DocumentationPluginsBootstrapper.java:163]   -   Found 1 custom documentation plugin(s)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,472   INFO   [main][ApiListingReferenceScanner.java:41]   -   Scanning for api listing references
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,617   INFO   [main][StartupInfoLogger.java:59]   -   Started TestRestTemplate in 8.647 seconds (JVM running for 9.94)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,927   INFO   [Thread-9][AwaitingNonWebApplicationListener.java:155]   -    [Dubbo] Current Spring Boot Application is about to shutdown...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,928   INFO   [Thread-9][AbstractRegistryFactory.java:68]   -    [DUBBO] Close all registries [nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=43136&qos.enable=false&release=2.7.3&timestamp=1610694224761], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,928   INFO   [Thread-9][AbstractRegistry.java:458]   -    [DUBBO] Destroy registry:nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=43136&qos.enable=false&release=2.7.3&timestamp=1610694224761, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,928   INFO   [Thread-9][AbstractRegistry.java:291]   -    [DUBBO] Unregister: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,932   INFO   [Thread-9][AbstractRegistry.java:467]   -    [DUBBO] Destroy unregister url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,932   INFO   [Thread-9][AbstractRegistry.java:320]   -    [DUBBO] Unsubscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,932   INFO   [Thread-9][AbstractRegistry.java:483]   -    [DUBBO] Destroy unsubscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=43136&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610694224743, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,936   INFO   [Thread-9][Server.java:112]   -    [DUBBO] qos-server stopped., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,940   INFO   [Thread-9][ExecutorConfigurationSupport.java:208]   -   Shutting down ExecutorService 'applicationTaskExecutor'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,944   INFO   [Thread-9][DubboGenericServiceFactory.java:159]   -   The Dubbo GenericService ReferenceBeans are destroying...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,944   INFO   [Thread-9][AnnotationInjectedBeanPostProcessor.java:293]   -   org.apache.dubbo.common.bytecode.proxy0@1592b1a was destroying!
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:03:47,944   INFO   [Thread-9][AnnotationInjectedBeanPostProcessor.java:305]   -   class org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor was destroying!
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:09,838   INFO   [main][AbstractTestContextBootstrapper.java:308]   -   Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.huiminpay.merchant.TestRestTemplate], using SpringBootContextLoader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:09,854   INFO   [main][AbstractContextLoader.java:264]   -   Could not detect default resource locations for test class [com.huiminpay.merchant.TestRestTemplate]: no resource found for suffixes {-context.xml, Context.groovy}.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:10,047   INFO   [main][AbstractTestContextBootstrapper.java:248]   -   Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:10,063   INFO   [main][AbstractTestContextBootstrapper.java:177]   -   Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@1204a1a, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@1e56eb2, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@18e8a9d, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@145ca0e, org.springframework.test.context.support.DirtiesContextTestExecutionListener@d83a66, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@ce5371, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1bffc17, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@535154, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1a34df2, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@138c1ec]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:10,941   INFO   [main][:]   -   using logger: org.apache.dubbo.common.logger.slf4j.Slf4jLoggerAdapter
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:10,945   INFO   [main][WelcomeLogoApplicationListener.java:63]   -   

 :: Dubbo Spring Boot (v2.7.1) : https://github.com/apache/incubator-dubbo-spring-boot-project
 :: Dubbo (v2.7.3) : https://github.com/apache/incubator-dubbo
 :: Discuss group : dev@dubbo.apache.org

[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:10,949   INFO   [main][OverrideDubboConfigApplicationListener.java:68]   -   Dubbo Config was overridden by externalized configuration {dubbo.application.name=merchant-application, dubbo.application.qos-enable=false, dubbo.config.multiple=true, dubbo.consumer.check=false, dubbo.consumer.retries=-1, dubbo.consumer.timeout=3000, dubbo.protocol.name=dubbo, dubbo.protocol.port=20891, dubbo.registry.address=nacos://127.0.0.1:8848, dubbo.scan.base‐packages=com.huiminpay.merchant}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:11,282   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$917d4ddd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:11,348   INFO   [pool-3-thread-1][AwaitingNonWebApplicationListener.java:140]   -    [Dubbo] Current Spring Boot Application is await...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:11,960   INFO   [main][OverrideDubboConfigApplicationListener.java:68]   -   Dubbo Config was overridden by externalized configuration {dubbo.application.name=merchant-application, dubbo.application.qos-enable=false, dubbo.config.multiple=true, dubbo.consumer.check=false, dubbo.consumer.retries=-1, dubbo.consumer.timeout=3000, dubbo.protocol.name=dubbo, dubbo.protocol.port=20891, dubbo.registry.address=nacos://127.0.0.1:8848, dubbo.scan.base‐packages=com.huiminpay.merchant}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:12,400   INFO   [main][NacosPropertySourceBuilder.java:87]   -   Loading nacos data, dataId: 'spring-boot-http.yaml', group: 'COMMON_GROUP'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:12,411   INFO   [main][NacosPropertySourceBuilder.java:87]   -   Loading nacos data, dataId: 'merchant-application.yaml', group: 'HUIMINPAY_GROUP'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:12,412   INFO   [main][PropertySourceBootstrapConfiguration.java:98]   -   Located property source: CompositePropertySource {name='NACOS', propertySources=[NacosPropertySource@4176838 {name='merchant-application.yaml', properties={swagger.enable=true, server.servlet.context-path=/merchant}}, NacosPropertySource@32791442 {name='spring-boot-http.yaml', properties={management.endpoints.web.exposure.include=refresh,health,info,env, spring.http.encoding.charset=UTF-8, spring.http.encoding.enabled=true, server.use-forward-headers=true, server.servlet.context-path=/, spring.messages.encoding=UTF-8, spring.http.encoding.force=true, server.tomcat.protocol_header=x-forwarded-proto, server.tomcat.remote_ip_header=x-forwarded-for}}]}
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:12,440   INFO   [main][SpringApplication.java:675]   -   No active profile set, falling back to default profiles: default
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,116   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'nacos-config' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,118   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'nacos-discovery' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,126   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ApplicationConfig] within prefix [dubbo.applications]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,126   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ModuleConfig] within prefix [dubbo.modules]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,126   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.RegistryConfig] within prefix [dubbo.registries]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProtocolConfig] within prefix [dubbo.protocols]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MonitorConfig] within prefix [dubbo.monitors]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProviderConfig] within prefix [dubbo.providers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ConsumerConfig] within prefix [dubbo.consumers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.spring.ConfigCenterBean] within prefix [dubbo.config-centers]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,127   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MetadataReportConfig] within prefix [dubbo.metadata-reports]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,128   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ApplicationConfig#0, class : org.apache.dubbo.config.ApplicationConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,129   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ApplicationConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,129   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ModuleConfig] within prefix [dubbo.module]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,129   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.RegistryConfig#0, class : org.apache.dubbo.config.RegistryConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,129   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.RegistryConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,129   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ProtocolConfig#0, class : org.apache.dubbo.config.ProtocolConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ProtocolConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MonitorConfig] within prefix [dubbo.monitor]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.ProviderConfig] within prefix [dubbo.provider]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   INFO   [main][DubboConfigBindingRegistrar.java:127]   -   The dubbo config bean definition [name : org.apache.dubbo.config.ConsumerConfig#0, class : org.apache.dubbo.config.ConsumerConfig] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   INFO   [main][DubboConfigBindingRegistrar.java:151]   -   The BeanPostProcessor bean definition [org.apache.dubbo.config.spring.beans.factory.annotation.DubboConfigBindingBeanPostProcessor] for dubbo config bean [name : org.apache.dubbo.config.ConsumerConfig#0] has been registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.spring.ConfigCenterBean] within prefix [dubbo.config-center]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,130   DEBUG   [main][DubboConfigBindingRegistrar.java:96]   -   There is no property for binding to dubbo config class [org.apache.dubbo.config.MetadataReportConfig] within prefix [dubbo.metadata-report]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,280   WARN   [main][EndpointId.java:135]   -   Endpoint ID 'service-registry' contains invalid characters, please migrate to a valid format.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,332   INFO   [main][ServiceAnnotationBeanPostProcessor.java:204]   -    [DUBBO] BeanNameGenerator bean can't be found in BeanFactory with name [org.springframework.context.annotation.internalConfigurationBeanNameGenerator], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,332   INFO   [main][ServiceAnnotationBeanPostProcessor.java:206]   -    [DUBBO] BeanNameGenerator will be a instance of org.springframework.context.annotation.AnnotationBeanNameGenerator , it maybe a potential problem on bean name generation., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,337   WARN   [main][ServiceAnnotationBeanPostProcessor.java:169]   -    [DUBBO] No Spring Bean annotating Dubbo's @Service was found under package[com.huiminpay.merchant], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,339   INFO   [main][ConfigurationClassPostProcessor.java:380]   -   Cannot enhance @Configuration bean definition 'org.apache.dubbo.spring.boot.autoconfigure.DubboRelaxedBinding2AutoConfiguration' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,339   INFO   [main][ConfigurationClassPostProcessor.java:380]   -   Cannot enhance @Configuration bean definition 'org.apache.dubbo.spring.boot.autoconfigure.DubboAutoConfiguration' since its singleton instance has been created too early. The typical cause is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor return type: Consider declaring such methods as 'static'.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,466   INFO   [main][GenericScope.java:294]   -   BeanFactory id=ec5f4d62-2066-3415-9b84-daa00a138238
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,728   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboOpenFeignAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboOpenFeignAutoConfiguration$$EnhancerBySpringCGLIB$$f92499e4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,743   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubbo.cloud-com.alibaba.cloud.dubbo.env.DubboCloudProperties' of type [com.alibaba.cloud.dubbo.env.DubboCloudProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,761   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'metadataJsonResolver' of type [com.alibaba.cloud.dubbo.metadata.resolver.DubboServiceBeanMetadataResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,772   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.apache.dubbo.config.ApplicationConfig#0' of type [org.apache.dubbo.config.ApplicationConfig] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,776   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboProtocolConfigSupplier' of type [com.alibaba.cloud.dubbo.metadata.DubboProtocolConfigSupplier] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,777   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.DubboMetadataServiceExporter' of type [com.alibaba.cloud.dubbo.service.DubboMetadataServiceExporter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,778   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboMetadataAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboMetadataAutoConfiguration$$EnhancerBySpringCGLIB$$6b64365e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,782   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.autoconfigure.DubboServiceAutoConfiguration' of type [com.alibaba.cloud.dubbo.autoconfigure.DubboServiceAutoConfiguration$$EnhancerBySpringCGLIB$$fe0e3eb6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,788   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboGenericServiceFactory' of type [com.alibaba.cloud.dubbo.service.DubboGenericServiceFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,793   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'dubboMetadataConfigServiceProxy' of type [com.alibaba.cloud.dubbo.service.DubboMetadataServiceProxy] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,798   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration' of type [org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$be537870] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,804   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientAutoConfiguration' of type [com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$b21e8135] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,820   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.commons.util.UtilAutoConfiguration' of type [org.springframework.cloud.commons.util.UtilAutoConfiguration$$EnhancerBySpringCGLIB$$3d111464] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,827   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'inetUtilsProperties' of type [org.springframework.cloud.commons.util.InetUtilsProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:13,829   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'inetUtils' of type [org.springframework.cloud.commons.util.InetUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:14,420   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'nacosProperties' of type [com.alibaba.cloud.nacos.NacosDiscoveryProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:14,424   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'nacosDiscoveryClient' of type [com.alibaba.cloud.nacos.discovery.NacosDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:14,442   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'server-org.springframework.boot.autoconfigure.web.ServerProperties' of type [org.springframework.boot.autoconfigure.web.ServerProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:14,444   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration$$EnhancerBySpringCGLIB$$8a82113e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,021   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'simpleDiscoveryProperties' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,024   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'simpleDiscoveryClient' of type [org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,028   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'compositeDiscoveryClient' of type [org.springframework.cloud.client.discovery.composite.CompositeDiscoveryClient] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,031   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.util.JSONUtils' of type [com.alibaba.cloud.dubbo.util.JSONUtils] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,124   WARN   [main][DubboServiceMetadataRepository.java:216]   -   Current application will subscribe all services(size:0) in registry, a lot of memory and CPU cycles may be used, thus it's strongly recommend you using the externalized property 'dubbo.cloud.subscribed-services' to specify the services
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,125   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository' of type [com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,138   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestParamServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestParamServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,158   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'spring.http-org.springframework.boot.autoconfigure.http.HttpProperties' of type [org.springframework.boot.autoconfigure.http.HttpProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,162   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration' of type [org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$c2a4dd14] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,170   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'stringHttpMessageConverter' of type [org.springframework.http.converter.StringHttpMessageConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,174   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration' of type [org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration$$EnhancerBySpringCGLIB$$fc7ad914] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,179   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$d0f6ca71] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,186   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$83438c8a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,191   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$3e5a7279] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,200   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,204   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,211   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$6525e9a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,223   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,229   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$b3026800] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,238   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,242   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,268   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,276   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'mappingJackson2HttpMessageConverter' of type [org.springframework.http.converter.json.MappingJackson2HttpMessageConverter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,281   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration' of type [org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$$EnhancerBySpringCGLIB$$8f971674] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,289   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'messageConverters' of type [org.springframework.boot.autoconfigure.http.HttpMessageConverters] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,291   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestBodyServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestBodyServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,300   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.RequestHeaderServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.RequestHeaderServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,307   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.parameter.PathVariableServiceParameterResolver' of type [com.alibaba.cloud.dubbo.service.parameter.PathVariableServiceParameterResolver] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,308   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'com.alibaba.cloud.dubbo.service.DubboGenericServiceExecutionContextFactory' of type [com.alibaba.cloud.dubbo.service.DubboGenericServiceExecutionContextFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,320   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,326   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,328   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,330   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'relaxedDubboConfigBinder' of type [org.apache.dubbo.spring.boot.autoconfigure.BinderDubboConfigBinder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,338   INFO   [main][PostProcessorRegistrationDelegate.java:330]   -   Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$917d4ddd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,417   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adaptive implements org.apache.dubbo.rpc.Protocol {
public void destroy()  {
throw new UnsupportedOperationException("The method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort()  {
throw new UnsupportedOperationException("The method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!");
}
public org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public org.apache.dubbo.rpc.Invoker refer(java.lang.Class arg0, org.apache.dubbo.common.URL arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg1 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.Protocol) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.Protocol extension = (org.apache.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,513   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adaptive implements org.apache.dubbo.rpc.cluster.Cluster {
public org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.cluster.Directory argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.Cluster) name from url (" + url.toString() + ") use keys([cluster])");
org.apache.dubbo.rpc.cluster.Cluster extension = (org.apache.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,525   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adaptive implements org.apache.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker arg0, boolean arg1) throws org.apache.dubbo.rpc.RpcException {
if (arg0 == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("org.apache.dubbo.rpc.Invoker argument getUrl() == null");
org.apache.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0, arg1);
}
public org.apache.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, org.apache.dubbo.common.URL arg2) throws org.apache.dubbo.rpc.RpcException {
if (arg2 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.ProxyFactory) name from url (" + url.toString() + ") use keys([proxy])");
org.apache.dubbo.rpc.ProxyFactory extension = (org.apache.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,568   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.ConsumerConfig#0] have been binding by prefix of configuration properties : dubbo.consumer
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,586   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.RegistryConfig#0] have been binding by prefix of configuration properties : dubbo.registry
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,593   INFO   [main][AnnotatedInterfaceConfigBeanBuilder.java:84]   -   The configBean[type:ReferenceBean] has been built.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,609   WARN   [main][AbstractInterfaceConfig.java:265]   -    [DUBBO] There's no valid metadata config found, if you are using the simplified mode of registry url, please make sure you have a metadata address configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,626   INFO   [main][AbstractInterfaceConfig.java:237]   -    [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,627   INFO   [main][AbstractInterfaceConfig.java:237]   -    [DUBBO] There's no valid monitor config found, if you want to open monitor statistics for Dubbo, please make sure your monitor is configured properly., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,643   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.registry;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adaptive implements org.apache.dubbo.registry.RegistryFactory {
public org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.registry.RegistryFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.registry.RegistryFactory extension = (org.apache.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,648   INFO   [main][QosProtocolWrapper.java:89]   -    [DUBBO] qos won't be started because it is disabled. Please check dubbo.application.qos.enable is configured either in system property, dubbo.properties or XML/spring-boot configuration., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,649   WARN   [main][SpringExtensionFactory.java:86]   -    [DUBBO] No spring extension (bean) named:applicationContext, try to find an extension (bean) of type org.springframework.context.ConfigurableApplicationContext, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,650   DEBUG   [main][SpringExtensionFactory.java:99]   -    [DUBBO] Error when get spring extension(bean) for type:org.springframework.context.ConfigurableApplicationContext, dubbo version: 2.7.3, current host: 192.168.137.1
org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.context.ConfigurableApplicationContext' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:343)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:335)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1123)
	at org.apache.dubbo.config.spring.extension.SpringExtensionFactory.getExtension(SpringExtensionFactory.java:94)
	at org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory.getExtension(AdaptiveExtensionFactory.java:47)
	at org.apache.dubbo.common.extension.ExtensionLoader.injectExtension(ExtensionLoader.java:566)
	at org.apache.dubbo.common.extension.ExtensionLoader.createExtension(ExtensionLoader.java:535)
	at org.apache.dubbo.common.extension.ExtensionLoader.getExtension(ExtensionLoader.java:351)
	at org.apache.dubbo.registry.RegistryFactory$Adaptive.getRegistry(RegistryFactory$Adaptive.java)
	at org.apache.dubbo.registry.integration.RegistryProtocol.refer(RegistryProtocol.java:379)
	at org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper.refer(ProtocolListenerWrapper.java:69)
	at org.apache.dubbo.qos.protocol.QosProtocolWrapper.refer(QosProtocolWrapper.java:70)
	at org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper.refer(ProtocolFilterWrapper.java:128)
	at org.apache.dubbo.rpc.Protocol$Adaptive.refer(Protocol$Adaptive.java)
	at org.apache.dubbo.config.ReferenceConfig.createProxy(ReferenceConfig.java:401)
	at org.apache.dubbo.config.ReferenceConfig.init(ReferenceConfig.java:329)
	at org.apache.dubbo.config.ReferenceConfig.get(ReferenceConfig.java:250)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler.init(ReferenceAnnotationBeanPostProcessor.java:269)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor$ReferenceBeanInvocationHandler.access$100(ReferenceAnnotationBeanPostProcessor.java:242)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildInvocationHandler(ReferenceAnnotationBeanPostProcessor.java:236)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.buildProxy(ReferenceAnnotationBeanPostProcessor.java:219)
	at org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(ReferenceAnnotationBeanPostProcessor.java:134)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor.getInjectedObject(AnnotationInjectedBeanPostProcessor.java:360)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor$AnnotatedFieldElement.inject(AnnotationInjectedBeanPostProcessor.java:540)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:90)
	at org.apache.dubbo.config.spring.beans.factory.annotation.AnnotationInjectedBeanPostProcessor.postProcessPropertyValues(AnnotationInjectedBeanPostProcessor.java:147)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1400)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:592)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:127)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108)
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:190)
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:132)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:227)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:246)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:97)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:190)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,654   WARN   [main][SpringExtensionFactory.java:104]   -    [DUBBO] No spring extension (bean) named:applicationContext, type:org.springframework.context.ConfigurableApplicationContext found, stop get bean., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,673   DEBUG   [main][AdaptiveClassCodeGenerator.java:104]   -    [DUBBO] package org.apache.dubbo.rpc.cluster;
import org.apache.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adaptive implements org.apache.dubbo.rpc.cluster.RouterFactory {
public org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL arg0)  {
if (arg0 == null) throw new IllegalArgumentException("url == null");
org.apache.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Failed to get extension (org.apache.dubbo.rpc.cluster.RouterFactory) name from url (" + url.toString() + ") use keys([protocol])");
org.apache.dubbo.rpc.cluster.RouterFactory extension = (org.apache.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,679   INFO   [main][AbstractRegistry.java:280]   -    [DUBBO] Register: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,679   DEBUG   [main][AbstractSpringCloudRegistry.java:116]   -   The URL[consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609] should not be registered.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,684   INFO   [main][AbstractRegistry.java:305]   -    [DUBBO] Subscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,692   INFO   [main][AbstractRegistry.java:212]   -    [DUBBO] Load registry cache file C:\Users\86188\.dubbo\dubbo-registry-merchant-application-127.0.0.1:8848.cache, data: {merchant-service/com.alibaba.cloud.dubbo.service.DubboMetadataService:1.0.0=dubbo://192.168.137.1:20892/com.alibaba.cloud.dubbo.service.DubboMetadataService?anyhost=true&application=merchant-service&category=providers&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&group=merchant-service&interface=com.alibaba.cloud.dubbo.service.DubboMetadataService&methods=getAllServiceKeys,getServiceRestMetadata,getExportedURLs,getAllExportedURLs&path=com.alibaba.cloud.dubbo.service.DubboMetadataService&pid=21116&protocol=dubbo&register=true&release=2.7.3&revision=2.1.0.RELEASE&side=provider&timestamp=1610639248351&version=1.0.0, com.huiminpay.merchant.service.MerchantServiceApi=dubbo://192.168.137.1:20892/com.huiminpay.merchant.service.MerchantServiceApi?anyhost=true&application=merchant-service&bean.name=ServiceBean:com.huiminpay.merchant.service.MerchantServiceApi&category=providers&deprecated=false&dubbo=2.0.2&dynamic=true&generic=false&interface=com.huiminpay.merchant.service.MerchantServiceApi&methods=findMerchantById&path=com.huiminpay.merchant.service.MerchantServiceApi&pid=21116&protocol=dubbo&register=true&release=2.7.3&side=provider&timestamp=1610639246705}, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,696   INFO   [main][AbstractRegistry.java:280]   -    [DUBBO] Register: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,710   INFO   [main][AbstractRegistry.java:305]   -    [DUBBO] Subscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,735   WARN   [main][AbstractRegistry.java:395]   -    [DUBBO] Ignore empty notify urls for subscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,737   WARN   [com.alibaba.nacos.naming.client.listener][AbstractRegistry.java:395]   -    [DUBBO] Ignore empty notify urls for subscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:15,739   INFO   [main][ReferenceConfig.java:421]   -    [DUBBO] Refer dubbo service com.huiminpay.merchant.service.MerchantServiceApi from url registry://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&check=false&cluster=registryaware&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&refer=application%3Dmerchant-application%26check%3Dfalse%26dubbo%3D2.0.2%26interface%3Dcom.huiminpay.merchant.service.MerchantServiceApi%26lazy%3Dfalse%26methods%3DfindMerchantById%26pid%3D54836%26qos.enable%3Dfalse%26register.ip%3D192.168.137.1%26release%3D2.7.3%26retries%3D-1%26side%3Dconsumer%26sticky%3Dfalse%26timeout%3D3000%26timestamp%3D1610696835609&register.ip=192.168.137.1&registry=nacos&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:16,830   INFO   [main][EndpointLinksResolver.java:59]   -   Exposing 4 endpoint(s) beneath base path '/actuator'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,018   INFO   [main][PropertySourcedRequestMappingHandlerMapping.java:69]   -   Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,315   WARN   [main][URLConfigurationSource.java:121]   -   No URLs will be polled as dynamic configuration sources.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,315   INFO   [main][URLConfigurationSource.java:122]   -   To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,321   WARN   [main][URLConfigurationSource.java:121]   -   No URLs will be polled as dynamic configuration sources.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,321   INFO   [main][URLConfigurationSource.java:122]   -   To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,356   DEBUG   [main][TraversableResolvers.java:60]   -   Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,357   DEBUG   [main][ResourceBundleMessageInterpolator.java:89]   -   Loaded expression factory via original TCCL
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,364   DEBUG   [main][TraversableResolvers.java:60]   -   Cannot find javax.persistence.Persistence on classpath. Assuming non JPA 2 environment. All properties will per default be traversable.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,368   DEBUG   [main][ConfigurationImpl.java:148]   -   Setting custom MessageInterpolator of type org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,369   DEBUG   [main][ConfigurationImpl.java:180]   -   Setting custom ConstraintValidatorFactory of type org.springframework.validation.beanvalidation.SpringConstraintValidatorFactory
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,369   DEBUG   [main][ConfigurationImpl.java:194]   -   Setting custom ParameterNameProvider of type org.springframework.validation.beanvalidation.LocalValidatorFactoryBean$1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,370   DEBUG   [main][ValidationXmlParser.java:120]   -   Trying to load META-INF/validation.xml for XML based Validator configuration.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,370   DEBUG   [main][ResourceLoaderHelper.java:53]   -   Trying to load META-INF/validation.xml via user class loader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,371   DEBUG   [main][ResourceLoaderHelper.java:60]   -   Trying to load META-INF/validation.xml via TCCL
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,372   DEBUG   [main][ResourceLoaderHelper.java:66]   -   Trying to load META-INF/validation.xml via Hibernate Validator's class loader
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,372   DEBUG   [main][ValidationXmlParser.java:127]   -   No META-INF/validation.xml found. Using annotation based configuration only.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,376   DEBUG   [main][ValidatorFactoryImpl.java:578]   -   HV000234: Using org.springframework.validation.beanvalidation.LocaleContextMessageInterpolator as ValidatorFactory-scoped message interpolator.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,376   DEBUG   [main][ValidatorFactoryImpl.java:579]   -   HV000234: Using org.hibernate.validator.internal.engine.resolver.TraverseAllTraversableResolver as ValidatorFactory-scoped traversable resolver.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,377   DEBUG   [main][ValidatorFactoryImpl.java:580]   -   HV000234: Using org.hibernate.validator.internal.util.ExecutableParameterNameProvider as ValidatorFactory-scoped parameter name provider.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,377   DEBUG   [main][ValidatorFactoryImpl.java:581]   -   HV000234: Using org.hibernate.validator.internal.engine.DefaultClockProvider as ValidatorFactory-scoped clock provider.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,377   DEBUG   [main][ValidatorFactoryImpl.java:582]   -   HV000234: Using org.hibernate.validator.internal.engine.scripting.DefaultScriptEvaluatorFactory as ValidatorFactory-scoped script evaluator factory.
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,460   INFO   [main][ExecutorConfigurationSupport.java:171]   -   Initializing ExecutorService 'applicationTaskExecutor'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,789   INFO   [main][ExecutorConfigurationSupport.java:171]   -   Initializing ExecutorService
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:17,803   INFO   [main][DubboConfigBindingBeanPostProcessor.java:109]   -   The properties of bean [name : org.apache.dubbo.config.ProtocolConfig#0] have been binding by prefix of configuration properties : dubbo.protocol
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,201   INFO   [main][DubboServiceMetadataRepository.java:262]   -   The metadata of Dubbo services has been initialized
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,215   INFO   [main][DocumentationPluginsBootstrapper.java:160]   -   Context refreshed
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,218   WARN   [ThreadPoolTaskScheduler-1][DubboServiceMetadataRepository.java:216]   -   Current application will subscribe all services(size:0) in registry, a lot of memory and CPU cycles may be used, thus it's strongly recommend you using the externalized property 'dubbo.cloud.subscribed-services' to specify the services
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,232   INFO   [main][DocumentationPluginsBootstrapper.java:163]   -   Found 1 custom documentation plugin(s)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,269   INFO   [main][ApiListingReferenceScanner.java:41]   -   Scanning for api listing references
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,407   INFO   [main][StartupInfoLogger.java:59]   -   Started TestRestTemplate in 8.275 seconds (JVM running for 9.385)
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,656   INFO   [Thread-9][AwaitingNonWebApplicationListener.java:155]   -    [Dubbo] Current Spring Boot Application is about to shutdown...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,657   INFO   [Thread-9][AbstractRegistryFactory.java:68]   -    [DUBBO] Close all registries [nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=54836&qos.enable=false&release=2.7.3&timestamp=1610696835626], dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,657   INFO   [Thread-9][AbstractRegistry.java:458]   -    [DUBBO] Destroy registry:nacos://127.0.0.1:8848/org.apache.dubbo.registry.RegistryService?application=merchant-application&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=54836&qos.enable=false&release=2.7.3&timestamp=1610696835626, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,657   INFO   [Thread-9][AbstractRegistry.java:291]   -    [DUBBO] Unregister: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,660   INFO   [Thread-9][AbstractRegistry.java:467]   -    [DUBBO] Destroy unregister url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=consumers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,661   INFO   [Thread-9][AbstractRegistry.java:320]   -    [DUBBO] Unsubscribe: consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,661   INFO   [Thread-9][AbstractRegistry.java:483]   -    [DUBBO] Destroy unsubscribe url consumer://192.168.137.1/com.huiminpay.merchant.service.MerchantServiceApi?application=merchant-application&category=providers,configurators,routers&check=false&dubbo=2.0.2&interface=com.huiminpay.merchant.service.MerchantServiceApi&lazy=false&methods=findMerchantById&pid=54836&qos.enable=false&release=2.7.3&retries=-1&side=consumer&sticky=false&timeout=3000&timestamp=1610696835609, dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,664   INFO   [Thread-9][Server.java:112]   -    [DUBBO] qos-server stopped., dubbo version: 2.7.3, current host: 192.168.137.1
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,667   INFO   [Thread-9][ExecutorConfigurationSupport.java:208]   -   Shutting down ExecutorService 'applicationTaskExecutor'
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,670   INFO   [Thread-9][DubboGenericServiceFactory.java:159]   -   The Dubbo GenericService ReferenceBeans are destroying...
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,671   INFO   [Thread-9][AnnotationInjectedBeanPostProcessor.java:293]   -   org.apache.dubbo.common.bytecode.proxy0@180a062 was destroying!
[${project.name}][${env:SERVER_PORT}]   2021-01-15 15:47:18,671   INFO   [Thread-9][AnnotationInjectedBeanPostProcessor.java:305]   -   class org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor was destroying!
